name: Deploy

on:
  push:
    branches:
      - "*"
      - "!skipci*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: set branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Check branch name is a legal serverless stage name
        run: |
          if [[ ! $branch_name =~ ^[a-z][a-z0-9-]*$ ]] || [[ $branch_name -gt 128 ]]; then
            echo """
              ------------------------------------------------------------------------------------------------------------------------------
              ERROR:  Please read below
              ------------------------------------------------------------------------------------------------------------------------------
              Bad branch name detected; cannot continue.

              The Serverless Application Framework has a concept of stages that facilitate multiple deployments of the same service.
              In this setup, the git branch name gets passed to Serverless to serve as the stage name.
              The stage name (branch name in this case) is tacked onto the end of the service name by Serverless.
              Therefore, the branch name must be a valid service name.

              From Serverless:
                A service name should only contain alphanumeric (case sensitive) and hyphens. It should start with an alphabetic character and shouldnt exceed 128 characters.

              For Github Actions support, please push your code to a new branch with a name that meets Serverless' service name requirements.
              So, make a new branch with a name that begins with a letter and is made up of only letters, numbers, and hyphens... then delete this branch.
              ------------------------------------------------------------------------------------------------------------------------------
            """
            exit 1
          fi
      - uses: actions/checkout@v1
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
          CMS_SPA_FORM_FROM_EMAIL: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_CMS_SPA_FORM_FROM_EMAIL] || secrets.CMS_SPA_FORM_FROM_EMAIL }}
          CMS_SPA_FORM_CMS_EMAIL: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_CMS_SPA_FORM_CMS_EMAIL] || secrets.CMS_SPA_FORM_CMS_EMAIL }}
          CMS_CHIP_FORM_CMS_EMAIL: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_CMS_CHIP_FORM_CMS_EMAIL] || secrets.CMS_CHIP_FORM_CMS_EMAIL }}
          BIGMAC_NAME: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_BIGMAC_NAME] || secrets.BIGMAC_NAME }}
          ROUTE_53_HOSTED_ZONE_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_HOSTED_ZONE_ID] }}
          ROUTE_53_DOMAIN_NAME: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_DOMAIN_NAME] }}
          CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_CLOUDFRONT_CERTIFICATE_ARN] }}
          CLOUDFRONT_DOMAIN_NAME: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_CLOUDFRONT_DOMAIN_NAME] }}
          IAM_PATH: ${{ secrets.IAM_PATH }}
          IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.IAM_PERMISSIONS_BOUNDARY_POLICY }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          METRICS_USERS: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_METRICS_USERS] || secrets.METRICS_USERS }}
          OKTA_METADATA_URL: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_OKTA_METADATA_URL] || secrets.OKTA_METADATA_URL }}
          TEST_STATE_USERS: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_TEST_STATE_USERS] || secrets.TEST_STATE_USERS }}
          TEST_STATE_USER_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_TEST_STATE_USER_PASSWORD] || secrets.TEST_STATE_USER_PASSWORD }}
          TEST_STATE_ADMIN_USERS: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_TEST_STATE_ADMIN_USERS] || secrets.TEST_STATE_ADMIN_USERS }}
          TEST_STATE_ADMIN_USER_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_TEST_STATE_ADMIN_USER_PASSWORD] || secrets.TEST_STATE_ADMIN_USER_PASSWORD }}
          TEST_CMS_APPROVER_USERS: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_TEST_CMS_APPROVER_USERS] || secrets.TEST_CMS_APPROVER_USERS }}
          TEST_CMS_APPROVER_USER_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_TEST_CMS_APPROVER_USER_PASSWORD] || secrets.TEST_CMS_APPROVER_USER_PASSWORD }}
          TEST_CMS_SYSTEM_ADMIN_USERS: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_TEST_CMS_SYSTEM_ADMIN_USERS] || secrets.TEST_CMS_SYSTEM_ADMIN_USERS }}
          TEST_CMS_SYSTEM_ADMIN_USER_PASSWORD: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_TEST_CMS_SYSTEM_ADMIN_USER_PASSWORD] || secrets.TEST_CMS_SYSTEM_ADMIN_USER_PASSWORD }}
      - name: lock this branch to prevent concurrent builds
        run: ./.github/github-lock.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Combine package-lock.json files to single file
        run: find services -maxdepth 3 -name package-lock.json | xargs cat package-lock.json > combined-package-lock.txt
      - name: cache service dependencies
        uses: actions/cache@v2
        with:
          path: |
            services/uploads/node_modules
            services/app-api/node_modules
            services/stream-functions/node_modules
            services/ui/node_modules
            services/ui-auth/node_modules
            services/ui-src/node_modules
            node_modules
            tests/nightwatch/node_modules
          key: ${{ runner.os }}-${{ hashFiles('combined-package-lock.txt') }}
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Set dev login flag
        if: ${{ env.branch_name != 'production' && env.branch_name != 'master' }}
        run: echo "ALLOW_DEV_LOGIN=true" >> $GITHUB_ENV
      - name: Unit Test
        run: |
          for d in services/*/; do
            pushd $d
            if [ "`jq '.scripts.test' <package.json`" != null ]; then
              npm clean-install-test
            fi
            popd
          done
      - name: deploy
        run: |
          # When deploying multiple copies of this quickstart to the same AWS Account (not ideal), a prefix helps prevent stepping on each other.
          # This can optionally be set as a variable in GitHub Actions Secrets
          ./deploy.sh $STAGE_PREFIX$branch_name
      - name: Seed Data
        if: ${{ env.branch_name != 'production' && env.branch_name != 'master' }}
        run: ./loadTestUsers.py $STAGE_PREFIX$branch_name
      - name: Endpoint
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui ApplicationEndpointUrl $STAGE_PREFIX$branch_name`
          echo "Application endpoint: $APPLICATION_ENDPOINT"
          popd
      - name: Run Nightwatch suite
        # do not run tests on val and production
        if: ${{ env.branch_name != 'production' && env.branch_name != 'master' }}
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui ApplicationEndpointUrl $STAGE_PREFIX$branch_name`
          popd
          ./test.sh
      - name: Store test reults
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test_results
          path: ./tests_output
