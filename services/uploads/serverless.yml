# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: uploads

plugins:
  - serverless-bundle
  - serverless-s3-local
  - serverless-offline
  - serverless-plugin-scripts
  - serverless-s3-bucket-helper
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: ${self:custom.iamPermissionsBoundaryPolicy}
      statements:
        - Effect: 'Allow'
          Action:
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:PutObjectTagging
            - s3:PutObjectVersionTagging
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-uploads-${AWS::AccountId}/*
            - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-avscan-${AWS::AccountId}/*
        - Effect: 'Allow'
          Action:
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-uploads-${AWS::AccountId}
            - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-avscan-${AWS::AccountId}

custom:
  stage: ${opt:stage, self:provider.stage}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path~true, ssm:/configuration/default/iam/path~true}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy~true, ssm:/configuration/default/iam/permissionsBoundaryPolicy~true, ""}
  scripts:
    hooks:
      # This script is run locally when running 'serverless deploy'
      package:initialize: |
        set -e
        curl -L --output lambda_layer.zip https://github.com/CMSgov/lambda-clamav-layer/releases/download/0.7/lambda_layer.zip
      deploy:finalize: |
        rm lambda_layer.zip
        serverless invoke --stage ${self:custom.stage} --function avDownloadDefinitions -t Event
  # S3 offline configuration
  s3:
    host: localhost
    directory: /tmp
    cors: resources/local-cors-policy.xml

layers:
  clamDefs:
    package:
      artifact: lambda_layer.zip

functions:
  avScan:
    handler: src/antivirus.lambdaHandleEvent
    name: ${self:service.name}-${self:custom.stage}-avScan
    role: BucketAVScanRole
    timeout: 300 # 300 seconds = 5 minutes. Average scan is 25 seconds.
    memorySize: 3008
    layers:
      - !Ref ClamDefsLambdaLayer
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: "lambda/s3-antivirus/av-definitions"
  avDownloadDefinitions:
    handler: src/download-definitions.lambdaHandleEvent
    events:
      - schedule: cron(0 10 */1 * ? *)
    role: BucketAVDownloadRole
    timeout: 300 # 300 seconds = 5 minutes
    memorySize: 1024
    layers:
      - !Ref ClamDefsLambdaLayer
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: "lambda/s3-antivirus/av-definitions"
  removePublicReadTag:
    handler: src/migrate.removePublicRead
    name: ${self:service.name}-${self:custom.stage}-removePublicReadTag
    role: BucketAVScanRole
    timeout: 300
    memorySize: 1024
    environment:
      ATTACHMENTS_BUCKET: !Ref AttachmentsBucket
    events:
      - schedule: rate(1 hour)

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy}
  Resources:
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              ExposedHeaders:
                - ETag
              MaxAge: 3000
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt AvScanLambdaFunction.Arn
        #Set at rest encryption
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      DependsOn: LambdaInvokePermission
    # Policy to allow public read access to all attachments
    S3CMSReadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AttachmentsBucket
        PolicyDocument:
          Statement:                 
            - Effect: Deny
              Action: "s3:PutObject"
              Principal: "*"
              NotResource:
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.bmp
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.csv
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.doc
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.docx
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.gif
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.jpg
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.jpeg
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.odp
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.ods
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.odt
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.png
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.pdf
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.ppt
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.pptx
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.rtf
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.tif
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.tiff
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.txt
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.xls
                - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*.xlsx
            - Effect: Deny
              Principal: "*"
              Action: "s3:*"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref AttachmentsBucket
                  - /*
              Condition:
                Bool: 
                  "aws:SecureTransport": "false"
            - Effect: Deny
              Principal: "*"
              Action: "s3:*"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref AttachmentsBucket
              Condition:
                Bool: 
                  "aws:SecureTransport": "false"
    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt AvScanLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: !Sub ${AWS::AccountId}
        SourceArn: !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}
    ClamDefsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service.name}-${self:custom.stage}-avscan-${AWS::AccountId}
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    ClamDefsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ClamDefsBucket
        PolicyDocument:
          Statement:                 
            - Effect: Deny
              Principal: "*"
              Action: "s3:*"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref ClamDefsBucket
                  - /*
              Condition:
                Bool: 
                  "aws:SecureTransport": "false"
            - Effect: Deny
              Principal: "*"
              Action: "s3:*"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref ClamDefsBucket
              Condition:
                Bool: 
                  "aws:SecureTransport": "false"
    BucketAVScanRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "BucketAVScanRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                    - s3:DeleteObject
                    - s3:PutObjectVersionTagging
                    - s3:ListBucket
                  Resource: !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}/*
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource: !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-attachments-${AWS::AccountId}
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                  Resource: !Sub ${ClamDefsBucket.Arn}/*
    BucketAVDownloadRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "BucketAVDownloadRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                    - s3:PutObjectVersionTagging
                    - s3:DeleteObject
                    - s3:ListBucket
                  Resource: !Sub ${ClamDefsBucket.Arn}/*
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource: !GetAtt ClamDefsBucket.Arn
                - Effect: Deny
                  Action: s3:*
                  Resource:
                    - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-avscan-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-avscan-${AWS::AccountId}/*
                    - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-uploads-${AWS::AccountId}
                    - !Sub arn:aws:s3:::${self:service.name}-${self:custom.stage}-uploads-${AWS::AccountId}/*
                  Condition:
                    Bool:
                      aws:SecureTransport: 'false'
                  

  # Print out the name of the bucket that is created
  Outputs:
    AttachmentsBucketName:
      Value:
        Ref: AttachmentsBucket
    AttachmentsBucketArn:
      Value: !GetAtt AttachmentsBucket.Arn
    Region:
      Value:
        Ref: AWS::Region
