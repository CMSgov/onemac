service: app-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-warmup

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${cf:database-${self:custom.stage}.AmendmentsTableName}
  tableArn: ${cf:database-${self:custom.stage}.AmendmentsTableArn}
  atomicCounterTableName: ${cf:database-${self:custom.stage}.AmendmentsAtomicCounterTableName}
  atomicCounterTableArn: ${cf:database-${self:custom.stage}.AmendmentsAtomicCounterTableArn}
  iamPath: ${env:IAM_PATH, "/"}
  warmupEnabled:
    production: true
    development: false
  warmup:
    enabled: ${self:custom.warmupEnabled.${env:INFRASTRUCTURE_TYPE, "development"}}
    role: LambdaWarmupRole
    vpc: false
    events:
      - schedule: rate(4 minutes)
    timeout: 20
    prewarm: true
    concurrency: 5


provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev

  environment:
    tableName: ${self:custom.tableName}
    atomicCounterTableName: ${self:custom.atomicCounterTableName}

functions:
  create:
    handler: create.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
          - ""
          - ${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
  Resources:
    LambdaApiRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
              - ''
              -
                - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ':policy'
                - '${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
            - Ref: AWS::NoValue
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: 'LambdaApiRolePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: 'Allow'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - ${self:custom.tableArn}
                  - ${self:custom.atomicCounterTableArn}
              - Effect: 'Allow'
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource:
                  - Fn::Join:
                    - "/"
                    -
                      - Fn::Join: [":", ["arn:aws:execute-api", {"Ref": "AWS::Region"}, {"Ref":"AWS::AccountId"}, {"Ref": "ApiGatewayRestApi"}]]
    LambdaWarmupRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service: 'lambda.amazonaws.com'
              Action: 'sts:AssumeRole'
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
              - ''
              -
                - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ':policy'
                - '${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
            - Ref: AWS::NoValue
        Policies:
          - PolicyName: 'Warmup'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 'arn:aws:logs:*:*:*'
                - Effect: 'Allow'
                  Action:
                    - lambda:InvokeFunction
                  Resource: '*'
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  Outputs:
    ApiGatewayRestApiName:
      Value:
        Ref: ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"
    Region:
      Value:
        Ref: AWS::Region
