service: app-api

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-dynamodb-local
  - serverless-associate-waf
  - serverless-offline
  - serverless-iam-helper
custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: onemac-${self:custom.stage}-change-requests
  spaIdTableName: onemac-${self:custom.stage}-spa-ids
  userTableName: onemac-${self:custom.stage}-user-profiles
  oneMacTableName: onemac-${self:custom.stage}-one
  iamPath: ${env:IAM_PATH, "/"}
  emailSource: ${opt:emailSource, env:CMS_SPA_FORM_FROM_EMAIL, "spa-reply@cms.hhs.gov"}
  userAccessEmailSource: ${opt:userAccessEmailSource, env:CMS_USER_ACCESS_FROM_EMAIL, "OneMACAccess@cms.hhs.gov"}
  reviewerEmail: ${opt:reviewTeamEmail, env:CMS_SPA_FORM_CMS_EMAIL, "OneMAC@cms.hhs.gov"}
  reviewerCHIPEmail: ${opt:reviewTeamCHIPEmail, env:CMS_CHIP_FORM_CMS_EMAIL, "OneMAC@cms.hhs.gov"}
  systemAdminEmail: ${opt:systemAdminEmail, env:CMS_SYSTEM_ADMIN_EMAIL, ""}
  warmupEnabled:
    production: true
    development: true
  warmup:
    enabled: ${self:custom.warmupEnabled.${env:INFRASTRUCTURE_TYPE, "development"}}
    role: LambdaWarmupRole
    vpc: false
    events:
      - schedule: rate(4 minutes)
    timeout: 20
    prewarm: true
    concurrency: 5
  #Dynamo DB local configuration
  dynamodb:
    stages:
      - dev
      - ${env:BRANCH, ""}
    start:
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
        - table: ${self:custom.tableName}
          sources: [./change-requests-seed.json]
        - table: ${self:custom.spaIdTableName}
          sources: [./spa-ids-seed.json]
        - table: ${self:custom.userTableName}
          sources: [./user-profiles-seed.json]
  serverless-offline:
    allowCache: true
associateWaf:
  name: ${self:custom.stage}-ApiGwWebAcl
  version: V2 #(optional) Regional | V2

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
  logs:
    restApi: true    
  environment:
    tableName: ${self:custom.tableName}
    spaIdTableName: ${self:custom.spaIdTableName}
    oneMacTableName: ${self:custom.oneMacTableName}
    userTableName: ${self:custom.userTableName}
    emailSource: ${self:custom.emailSource}
    userAccessEmailSource: ${self:custom.userAccessEmailSource}
    reviewerEmail: ${self:custom.reviewerEmail}
    reviewerCHIPEmail: ${self:custom.reviewerCHIPEmail}
    systemAdminEmail: ${self:custom.systemAdminEmail}

functions:
  # For DynamoDB Change Requests Table
  submit:
    handler: submit.main
    role: LambdaApiRole
    events:
      - http:
          path: submit
          method: post
          cors: true
          authorizer: aws_iam
  submitSPA:
    handler: submitSPA.main
    role: LambdaApiRole
    events:
      - http:
          path: submitSPA
          method: post
          cors: true
          authorizer: aws_iam
  submitSPARAIResponse:
    handler: submitSPARAIResponse.main
    role: LambdaApiRole
    events:
      - http:
          path: submitSPARAIResponse
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    role: LambdaApiRole
    events:
      - http:
          path: get/{id}/{userId}
          method: get
          cors: true
          authorizer: aws_iam

  getAllByAuthorizedTerritories:
    handler: getAllByAuthorizedTerritories.main
    role: LambdaApiRole
    events:
      - http:
          path: getAllByAuthorizedTerritories
          method: get
          cors: true
          authorizer: aws_iam

  getAllPackages:
    handler: getAllPackages.main
    role: LambdaApiRole
    events:
      - http:
          path: getAllPackages
          method: get
          cors: true
          authorizer: aws_iam

  package-exists:
    handler: package-exists.main
    role: LambdaApiRole
    events:
      - http:
          path: package-exists/{packageId}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    role: LambdaApiRole
    events:
      - http:
          path: get
          method: get
          cors: true
          authorizer: aws_iam
  listall:
    handler: listall.main
    role: LambdaApiRole
    events:
      - http:
          path: listall
          method: get
          cors: true
          authorizer: aws_iam

  # For DynamoDB User Table
  getUser:
    handler: getUser.main
    role: LambdaApiRole
    events:
      - http:
          path: getUser
          method: get
          cors: true
          authorizer: aws_iam
  getMyUserList:
    handler: getMyUserList.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyUserList
          method: get
          cors: true
          authorizer: aws_iam
  putUser:
    handler: putUser.main
    role: LambdaApiRole
    events:
      - http:
          path: putUser
          method: put
          cors: true
          authorizer: aws_iam
  setUserPhoneNumber:
    handler: putPhoneNumber.main
    role: LambdaApiRole
    events:
      - http:
          path: phoneNumber
          method: put
          cors: true
          authorizer: aws_iam

  getStateAdminList:
    handler: getStateAdminList.main
    role: LambdaApiRole
    events:
      - http:
          path: getStateAdmins
          method: get
          cors: true
          authorizer: aws_iam

  getCmsApproverList:
    handler: getCmsApproverList.main
    role: LambdaApiRole
    events:
      - http:
          path: getCmsApprovers
          method: get
          cors: true
          authorizer: aws_iam

  getCmsSystemAdminList:
    handler: getCmsSystemAdminList.main
    role: LambdaApiRole
    events:
      - http:
          path: getCmsSystemAdmins
          method: get
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/base.yml)}

  # Uploads S3 bucket
  - ${file(resources/spa-form-tables.yml)}

  # User data DynamoDB table
  - ${file(resources/user-table.yml)}

  # Roles
  - ${file(resources/roles.yml)}

  # API Gateway
  - ${file(resources/api-gateway.yml)}
