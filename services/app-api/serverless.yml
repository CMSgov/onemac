service: app-api

frameworkVersion: "3"

useDotenv: true

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-dynamodb-local
  - serverless-associate-waf
  - serverless-offline
  - serverless-iam-helper
  - serverless-s3-bucket-helper
custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: cms-spa-form-${self:custom.stage}-change-requests
  spaIdTableName: cms-spa-form-${self:custom.stage}-spa-ids
  oneMacTableName: onemac-${self:custom.stage}-one
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
  emailSource: ${opt:emailSource, ssm:/configuration/${self:custom.stage}/email/cms_spa_form_from_email, ssm:/configuration/default/email/cms_spa_form_from_email, "spa-reply@cms.hhs.gov"}
  userAccessEmailSource: ${opt:userAccessEmailSource, ssm:/configuration/${self:custom.stage}/email/cms_user_access_from_email, ssm:/configuration/default/email/cms_user_access_from_email, "OneMACAccess@cms.hhs.gov"}
  reviewerEmail: ${opt:reviewTeamEmail, ssm:/configuration/${self:custom.stage}/email/cms_spa_form_cms_email, ssm:/configuration/default/email/cms_spa_form_cms_email, "OneMAC@cms.hhs.gov"}
  reviewerCHIPEmail: ${opt:reviewTeamCHIPEmail, ssm:/configuration/${self:custom.stage}/email/cms_spa_form_chip_email, ssm:/configuration/default/email/cms_spa_form_chip_email, "OneMAC@cms.hhs.gov"}
  chipCcEmail: ${opt:chipCcEmail, ssm:/configuration/${self:custom.stage}/email/cms_chip_form_cc_email, ssm:/configuration/default/email/cms_chip_form_cc_email, ""}
  systemAdminEmail: ${opt:systemAdminEmail, ssm:/configuration/${self:custom.stage}/email/cms_system_admin_email, ssm:/configuration/default/email/cms_system_admin_email, ""}
  productionNoEmailDebug: ${opt:productionNoEmailDebug, ssm:/configuration/${self:custom.stage}/email/no_email_debug, ssm:/configuration/default/email/no_email_debug, "OneMAC@cms.hhs.gov"}
  testingEmail: ${opt:testingEmail, ssm:/configuration/${self:custom.stage}/email/testing_team_email, ssm:/configuration/default/email/testing_team_email, ""}
  applicationEndpoint: ${cf:ui-${self:custom.stage}.ApplicationEndpointUrl, "onemac.cms.gov"}
  attachmentsBucket: ${cf:uploads-${self:custom.stage}.AttachmentsBucketName}
  attachmentsBucketArn: ${cf:uploads-${self:custom.stage}.AttachmentsBucketArn}
  warmupEnabled:
    production: true
    development: true
  warmup:
    default:
      enabled: ${self:custom.warmupEnabled.${env:INFRASTRUCTURE_TYPE, "development"}}
      role: LambdaWarmupRole
      vpc: false
      events:
        - schedule: rate(4 minutes)
      timeout: 20
      prewarm: true
      concurrency: 5
  #Dynamo DB local configuration
  dynamodb:
    stages:
      - dev
      - ${env:BRANCH, ""}
    start:
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.tableName}
            sources: [./change-requests-seed.json]
          - table: ${self:custom.spaIdTableName}
            sources: [./spa-ids-seed.json]
          - table: ${self:custom.oneMacTableName}
            sources: [./one-seed.json]
  serverless-offline:
    allowCache: true
  associateWaf:
    name: ${self:custom.stage}-ApiGwWebAcl
    version: V2 #(optional) Regional | V2

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy, ""}'
  logs:
    restApi: true
  environment:
    NODE_OPTIONS: "--enable-source-maps"
    tableName: ${self:custom.tableName}
    spaIdTableName: ${self:custom.spaIdTableName}
    oneMacTableName: ${self:custom.oneMacTableName}
    emailSource: ${self:custom.emailSource}
    userAccessEmailSource: ${self:custom.userAccessEmailSource}
    reviewerEmail: ${self:custom.reviewerEmail}
    reviewerCHIPEmail: ${self:custom.reviewerCHIPEmail}
    chipCcEmail: ${self:custom.chipCcEmail}
    testingEmail: ${self:custom.testingEmail}
    systemAdminEmail: ${self:custom.systemAdminEmail}
    productionNoEmailDebug: ${self:custom.productionNoEmailDebug}
    applicationEndpoint: ${self:custom.applicationEndpoint}
    attachmentsBucket: ${self:custom.attachmentsBucket}
  tracing:
    apiGateway: true
    lambda: true

functions:
  migrate:
    handler: migrate.main
    role: LambdaApiRole
    timeout: 180

  convert:
    handler: convert.main
    role: LambdaApiRole
    timeout: 180
    warmup:
      default:
        enabled: false

  submitBaseWaiver:
    handler: form/submitBaseWaiver.main
    role: LambdaApiRole
    events:
      - http:
          path: submitBaseWaiver
          method: post
          cors: true
          authorizer: aws_iam

  submitMedicaidSpa:
    handler: form/submitMedicaidSPA.main
    role: LambdaApiRole
    events:
      - http:
          path: submitMedicaidSPA
          method: post
          cors: true
          authorizer: aws_iam

  submitMedicaidSpaRaiResponse:
    handler: form/submitMedicaidSPARAIResponse.main
    role: LambdaApiRole
    events:
      - http:
          path: submitMedicaidSPARAIResponse
          method: post
          cors: true
          authorizer: aws_iam

  submitChipSpa:
    handler: form/submitCHIPSPA.main
    role: LambdaApiRole
    events:
      - http:
          path: submitCHIPSPA
          method: post
          cors: true
          authorizer: aws_iam

  submitCHIPSPARAIResponse:
    handler: form/submitCHIPSPARAIResponse.main
    role: LambdaApiRole
    events:
      - http:
          path: submitCHIPSPARAIResponse
          method: post
          cors: true
          authorizer: aws_iam

  submitWaiverExtension:
    handler: form/submitWaiverExtension.main
    role: LambdaApiRole
    events:
      - http:
          path: submitWaiverExtension
          method: post
          cors: true
          authorizer: aws_iam

  withdrawBaseWaiver:
    handler: action/withdrawBaseWaiver.main
    role: LambdaApiRole
    events:
      - http:
          path: withdrawBaseWaiver
          method: post
          cors: true
          authorizer: aws_iam

  withdrawMedicaidSPA:
    handler: action/withdrawMedicaidSPA.main
    role: LambdaApiRole
    events:
      - http:
          path: withdrawMedicaidSPA
          method: post
          cors: true
          authorizer: aws_iam

  withdrawCHIPSPA:
    handler: action/withdrawCHIPSPA.main
    role: LambdaApiRole
    events:
      - http:
          path: withdrawCHIPSPA
          method: post
          cors: true
          authorizer: aws_iam

  withdrawWaiverTemporaryExtension:
    handler: action/withdrawWaiverTemporaryExtension.main
    role: LambdaApiRole
    events:
      - http:
          path: withdrawWaiverTemporaryExtension
          method: post
          cors: true
          authorizer: aws_iam

  withdrawWaiverRenewal:
    handler: action/withdrawWaiverRenewal.main
    role: LambdaApiRole
    events:
      - http:
          path: withdrawWaiverRenewal
          method: post
          cors: true
          authorizer: aws_iam

  withdrawWaiverAmendment:
    handler: action/withdrawWaiverAmendment.main
    role: LambdaApiRole
    events:
      - http:
          path: withdrawWaiverAmendment
          method: post
          cors: true
          authorizer: aws_iam

  submit:
    handler: submit.main
    role: LambdaApiRole
    events:
      - http:
          path: submit
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    role: LambdaApiRole
    events:
      - http:
          path: get/{id}/{userId}
          method: get
          cors: true
          authorizer: aws_iam

  getDetail:
    handler: getDetail.main
    role: LambdaApiRole
    events:
      - http:
          path: getDetail/{id}
          method: get
          cors: true
          authorizer: aws_iam

  getAllByAuthorizedTerritories:
    handler: getAllByAuthorizedTerritories.main
    role: LambdaApiRole
    events:
      - http:
          path: getAllByAuthorizedTerritories
          method: get
          cors: true
          authorizer: aws_iam

  getMyPackages:
    handler: getMyPackages.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyPackages
          method: get
          cors: true
          authorizer: aws_iam

  package-exists:
    handler: package-exists.main
    role: LambdaApiRole
    events:
      - http:
          path: package-exists/{packageId}
          method: get
          cors: true
          authorizer: aws_iam

  getUser:
    handler: getUser.main
    role: LambdaApiRole
    events:
      - http:
          path: getUser
          method: get
          cors: true
          authorizer: aws_iam

  getMyUserList:
    handler: getMyUserList.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyUserList
          method: get
          cors: true
          authorizer: aws_iam

  setContactInfo:
    handler: setContactInfo.main
    role: LambdaApiRole
    events:
      - http:
          path: contactInfo
          method: put
          cors: true
          authorizer: aws_iam

  requestAccess:
    handler: requestAccess.main
    role: LambdaApiRole
    events:
      - http:
          path: requestAccess
          method: post
          cors: true
          authorizer: aws_iam

  updateUserStatus:
    handler: updateUserStatus.main
    role: LambdaApiRole
    events:
      - http:
          path: updateUserStatus
          method: post
          cors: true
          authorizer: aws_iam

  setUserPhoneNumber:
    handler: putPhoneNumber.main
    role: LambdaApiRole
    events:
      - http:
          path: phoneNumber
          method: put
          cors: true
          authorizer: aws_iam

  getMyApprovers:
    handler: getMyApprovers.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyApprovers
          method: get
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/base.yml)}

  # Uploads S3 bucket
  - ${file(resources/spa-form-tables.yml)}

  # Roles
  - ${file(resources/roles.yml)}

  # API Gateway
  - ${file(resources/api-gateway.yml)}
