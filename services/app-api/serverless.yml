service: app-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-dynamodb-local
  # Serverless offline needs to be last
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: cms-spa-form-${self:custom.stage}-amendments
  iamPath: ${env:IAM_PATH, "/"}
  emailSource: ${opt:emailSource, env:SES_SOURCE_EMAIL_ADDRESS, "admin@example.com"}
  reviewerEmail: ${opt:reviewTeamEmail, env:SES_REVIEW_TEAM_EMAIL_ADDRESS, "reviewteam@example.com"}
  warmupEnabled:
    production: true
    development: false
  warmup:
    enabled: ${self:custom.warmupEnabled.${env:INFRASTRUCTURE_TYPE, "development"}}
    role: LambdaWarmupRole
    vpc: false
    events:
      - schedule: rate(4 minutes)
    timeout: 20
    prewarm: true
    concurrency: 5
  #Dynamo DB local configuration
  dynamodb:
    stages:
      - dev
    start:
      inMemory: true
      migrate: true
  serverless-offline:
    allowCache: true


provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev

  environment:
    tableName: ${self:custom.tableName}


functions:
  create:
    handler: create.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: waivers
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      emailSource: ${self:custom.emailSource}
      reviewerEmail: ${self:custom.reviewerEmail}

  get:
    handler: get.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments/{id}
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: waivers/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    role: LambdaApiRole
    events:
      - http:
          path: amendments
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: waivers
          method: get
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/base.yml)}

  # Uploads S3 bucket
  - ${file(resources/spa-form-tables.yml)}

  # Roles
  - ${file(resources/roles.yml)}

  # API Gateway
  - ${file(resources/api-gateway.yml)}

  
