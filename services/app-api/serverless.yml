service: app-api

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-dynamodb-local
  - serverless-associate-waf
  - serverless-offline
  - serverless-iam-helper
  - serverless-s3-bucket-helper
custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: cms-spa-form-${self:custom.stage}-change-requests
  spaIdTableName: cms-spa-form-${self:custom.stage}-spa-ids
  oneMacTableName: onemac-${self:custom.stage}-one
  iamPath: ${env:IAM_PATH, "/"}
  emailSource: ${opt:emailSource, env:CMS_SPA_FORM_FROM_EMAIL, "spa-reply@cms.hhs.gov"}
  userAccessEmailSource: ${opt:userAccessEmailSource, env:CMS_USER_ACCESS_FROM_EMAIL, "OneMACAccess@cms.hhs.gov"}
  reviewerEmail: ${opt:reviewTeamEmail, env:CMS_SPA_FORM_CMS_EMAIL, "OneMAC@cms.hhs.gov"}
  reviewerCHIPEmail: ${opt:reviewTeamCHIPEmail, env:CMS_CHIP_FORM_CMS_EMAIL, "OneMAC@cms.hhs.gov"}
  chipCcEmail: ${opt:chipCcEmail, env:CMS_CHIP_FORM_CC_EMAIL, ""}
  systemAdminEmail: ${opt:systemAdminEmail, env:CMS_SYSTEM_ADMIN_EMAIL, ""}
  productionNoEmailDebug: ${opt:productionNoEmailDebug, env:NO_EMAIL_DEBUG, "OneMAC@cms.hhs.gov"}
  testingEmail: ${opt:testingEmail, env:TESTING_TEAM_EMAIL, ""}
  applicationEndpoint: ${cf:ui-${self:custom.stage}.ApplicationEndpointUrl, "onemac.cms.gov"}
  attachmentsBucket: ${cf:uploads-${self:custom.stage}.AttachmentsBucketName}
  attachmentsBucketArn: ${cf:uploads-${self:custom.stage}.AttachmentsBucketArn}
  warmupEnabled:
    production: true
    development: true
  warmup:
    enabled: ${self:custom.warmupEnabled.${env:INFRASTRUCTURE_TYPE, "development"}}
    role: LambdaWarmupRole
    vpc: false
    events:
      - schedule: rate(4 minutes)
    timeout: 20
    prewarm: true
    concurrency: 5
  #Dynamo DB local configuration
  dynamodb:
    stages:
      - dev
      - ${env:BRANCH, ""}
    start:
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
        - table: ${self:custom.tableName}
          sources: [./change-requests-seed.json]
        - table: ${self:custom.spaIdTableName}
          sources: [./spa-ids-seed.json]
        - table: ${self:custom.oneMacTableName}
          sources: [./one-seed.json]
  serverless-offline:
    allowCache: true
  associateWaf:
    name: ${self:custom.stage}-ApiGwWebAcl
    version: V2 #(optional) Regional | V2

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
  logs:
    restApi: true    
  environment:
    tableName: ${self:custom.tableName}
    spaIdTableName: ${self:custom.spaIdTableName}
    oneMacTableName: ${self:custom.oneMacTableName}
    emailSource: ${self:custom.emailSource}
    userAccessEmailSource: ${self:custom.userAccessEmailSource}
    reviewerEmail: ${self:custom.reviewerEmail}
    reviewerCHIPEmail: ${self:custom.reviewerCHIPEmail}
    chipCcEmail: ${self:custom.chipCcEmail}
    testingEmail: ${self:custom.testingEmail}
    systemAdminEmail: ${self:custom.systemAdminEmail}
    productionNoEmailDebug: ${self:custom.productionNoEmailDebug}
    applicationEndpoint: ${self:custom.applicationEndpoint}
    attachmentsBucket: ${self:custom.attachmentsBucket}

functions:

  migrate:
    handler: migrate.main
    role: LambdaApiRole
    timeout: 180

  submit:
    handler: submit.main
    role: LambdaApiRole
    events:
      - http:
          path: submit
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    role: LambdaApiRole
    events:
      - http:
          path: get/{id}/{userId}
          method: get
          cors: true
          authorizer: aws_iam

  getDetail:
    handler: getDetail.main
    role: LambdaApiRole
    events:
      - http:
          path: getDetail/{id}
          method: get
          cors: true
          authorizer: aws_iam

  getAllByAuthorizedTerritories:
    handler: getAllByAuthorizedTerritories.main
    role: LambdaApiRole
    events:
      - http:
          path: getAllByAuthorizedTerritories
          method: get
          cors: true
          authorizer: aws_iam

  getMyPackages:
    handler: getMyPackages.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyPackages
          method: get
          cors: true
          authorizer: aws_iam

  package-exists:
    handler: package-exists.main
    role: LambdaApiRole
    events:
      - http:
          path: package-exists/{packageId}
          method: get
          cors: true
          authorizer: aws_iam

  withdraw-package:
    handler: withdrawPackage.main
    role: LambdaApiRole
    events:
      - http:
          path: withdraw
          method: post
          cors: true
          authorizer: aws_iam

  getUser:
    handler: getUser.main
    role: LambdaApiRole
    events:
      - http:
          path: getUser
          method: get
          cors: true
          authorizer: aws_iam

  getMyUserList:
    handler: getMyUserList.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyUserList
          method: get
          cors: true
          authorizer: aws_iam

  setContactInfo:
    handler: setContactInfo.main
    role: LambdaApiRole
    events:
      - http:
          path: contactInfo
          method: put
          cors: true
          authorizer: aws_iam

  requestAccess:
    handler: requestAccess.main
    role: LambdaApiRole
    events:
      - http:
          path: requestAccess
          method: post
          cors: true
          authorizer: aws_iam

  updateUserStatus:
    handler: updateUserStatus.main
    role: LambdaApiRole
    events:
      - http:
          path: updateUserStatus
          method: post
          cors: true
          authorizer: aws_iam

  setUserPhoneNumber:
    handler: putPhoneNumber.main
    role: LambdaApiRole
    events:
      - http:
          path: phoneNumber
          method: put
          cors: true
          authorizer: aws_iam

  getMyApprovers:
    handler: getMyApprovers.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyApprovers
          method: get
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/base.yml)}

  # Uploads S3 bucket
  - ${file(resources/spa-form-tables.yml)}

  # Roles
  - ${file(resources/roles.yml)}

  # API Gateway
  - ${file(resources/api-gateway.yml)}
