service: app-api

frameworkVersion: "3"

useDotenv: true

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-dynamodb-local
  - serverless-associate-waf
  - serverless-offline
  - serverless-iam-helper
  - serverless-s3-bucket-helper
custom:
  stage: ${opt:stage, self:provider.stage}
  oneMacTableName: onemac-${self:custom.stage}-one
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
  emailSource: ${ssm:/configuration/${self:custom.stage}/email/cms_spa_form_from_email, ssm:/configuration/default/email/cms_spa_form_from_email, file(resources/ssm-params.yml):Resources.CmsSpaFormFromEmail.Properties.Value}
  userAccessEmailSource: ${ssm:/configuration/${self:custom.stage}/email/cms_user_access_from_email, ssm:/configuration/default/email/cms_user_access_from_email, file(resources/ssm-params.yml):Resources.CmsUserAccessFromEmail.Properties.Value}
  reviewerEmail: ${ssm:/configuration/${self:custom.stage}/email/cms_spa_form_cms_email, ssm:/configuration/default/email/cms_spa_form_cms_email, file(resources/ssm-params.yml):Resources.CmsSpaFormCmsEmail.Properties.Value}
  reviewerCHIPEmail: ${ssm:/configuration/${self:custom.stage}/email/cms_spa_form_chip_email, ssm:/configuration/default/email/cms_spa_form_chip_email, file(resources/ssm-params.yml):Resources.CmsSpaFormChipEmail.Properties.Value}
  chipCcEmail: ${ssm:/configuration/${self:custom.stage}/email/cms_chip_form_cc_email, ssm:/configuration/default/email/cms_chip_form_cc_email, file(resources/ssm-params.yml):Resources.CmsSpaFormChipCcEmail.Properties.Value}
  dmcoEmail: ${ssm:/configuration/${self:custom.stage}/email/cms_dmco_email, file(resources/ssm-params.yml):Resources.CmsDmcoEmail.Properties.Value}
  dhcbsooEmail: ${ssm:/configuration/${self:custom.stage}/email/cms_dhcbsoo_email, file(resources/ssm-params.yml):Resources.CmsDhcbsooEmail.Properties.Value}
  dpoEmail: ${ssm:/configuration/${self:custom.stage}/email/cms_dpo_email, file(resources/ssm-params.yml):Resources.CmsDpoEmail.Properties.Value}
  testingEmail: ${ssm:/configuration/${self:custom.stage}/email/testing_team_email, ssm:/configuration/default/email/testing_team_email, ""}
  applicationEndpoint: ${cf:ui-${self:custom.stage}.ApplicationEndpointUrl, "onemac.cms.gov"}
  attachmentsBucket: ${cf:uploads-${self:custom.stage}.AttachmentsBucketName}
  attachmentsBucketArn: ${cf:uploads-${self:custom.stage}.AttachmentsBucketArn}
  warmupEnabled:
    production: true
    development: false
  warmup:
    default:
      enabled: ${self:custom.warmupEnabled.${env:INFRASTRUCTURE_TYPE, "development"}}
      role: LambdaWarmupRole
      vpc: false
      events:
        - schedule: rate(4 minutes)
      timeout: 20
      prewarm: true
      concurrency: 5
  #Dynamo DB local configuration
  dynamodb:
    stages:
      - dev
      - ${env:BRANCH, ""}
    start:
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.oneMacTableName}
            sources: [./one-seed.json]
  serverless-offline:
    allowCache: true
  associateWaf:
    name: ${self:custom.stage}-ApiGwWebAcl
    version: V2 #(optional) Regional | V2

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy, ""}'
  logs:
    restApi: true
  environment:
    NODE_OPTIONS: "--enable-source-maps"
    oneMacTableName: ${self:custom.oneMacTableName}
    emailSource: ${self:custom.emailSource}
    reviewerEmail: ${self:custom.reviewerEmail}
    testingEmail: ${self:custom.testingEmail}
    applicationEndpoint: ${self:custom.applicationEndpoint}
    attachmentsBucket: ${self:custom.attachmentsBucket}
  tracing:
    apiGateway: true
    lambda: true

functions:
  migrate:
    handler: migrate.main
    role: LambdaApiRole
    timeout: 180

  submitInitialWaiver:
    handler: form/submitInitialWaiver.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitInitialWaiver
          method: post
          cors: true
          authorizer: aws_iam

  submitMedicaidSpa:
    handler: form/submitMedicaidSPA.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitMedicaidSPA
          method: post
          cors: true
          authorizer: aws_iam

  submitMedicaidSpaRaiResponse:
    handler: form/submitMedicaidSPARAIResponse.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitMedicaidSPARAIResponse
          method: post
          cors: true
          authorizer: aws_iam

  submitChipSpa:
    handler: form/submitCHIPSPA.main
    role: LambdaApiRole
    timeout: 30
    environment:
      reviewerEmail: ${self:custom.reviewerCHIPEmail}
      ccEmail: ${self:custom.chipCcEmail}
    events:
      - http:
          path: submitCHIPSPA
          method: post
          cors: true
          authorizer: aws_iam

  submitCHIPSPARAIResponse:
    handler: form/submitCHIPSPARAIResponse.main
    role: LambdaApiRole
    timeout: 30
    environment:
      reviewerEmail: ${self:custom.reviewerCHIPEmail}
      ccEmail: ${self:custom.chipCcEmail}
    events:
      - http:
          path: submitCHIPSPARAIResponse
          method: post
          cors: true
          authorizer: aws_iam

  submitWaiverExtension:
    handler: form/submitWaiverExtension.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitWaiverExtension
          method: post
          cors: true
          authorizer: aws_iam

  submitWaiverRaiResponse:
    handler: form/submitWaiverRAIResponse.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitWaiverRAIResponse
          method: post
          cors: true
          authorizer: aws_iam

  submitWaiverRenewal:
    handler: form/submitWaiverRenewal.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitWaiverRenewal
          method: post
          cors: true
          authorizer: aws_iam

  submitWaiverAmendment:
    handler: form/submitWaiverAmendment.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitWaiverAmendment
          method: post
          cors: true
          authorizer: aws_iam

  submitWaiverAppendixK:
    handler: form/submitWaiverAppendixK.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitWaiverAppendixK
          method: post
          cors: true
          authorizer: aws_iam

  submitWaiverAppendixKRAIResponse:
    handler: form/submitWaiverAppendixKRAIResponse.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: submitWaiverAppendixKRAIResponse
          method: post
          cors: true
          authorizer: aws_iam

  validateParentOfWaiverRenewal:
    handler: validation/validateParentOfWaiverRenewal.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfWaiverRenewal/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfWaiverAmendment:
    handler: validation/validateParentOfWaiverAmendment.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfWaiverAmendment/{parentId}
          method: get
          cors: true
          authorizer: aws_iam
  
  validateParentOfTemporaryExtension:
    handler: validation/validateParentOfTemporaryExtension.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfTemporaryExtension/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfMedicaidSpaRaiResponse:
    handler: validation/validateParentOfMedicaidSpaRaiResponse.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfMedicaidSpaRaiResponse/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfMedicaidSpaWithdraw:
    handler: validation/validateParentOfMedicaidSpaWithdraw.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfMedicaidSpaWithdraw/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfChipSpaRaiResponse:
    handler: validation/validateParentOfChipSpaRaiResponse.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfChipSpaRaiResponse/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfChipSpaWithdraw:
    handler: validation/validateParentOfChipSpaWithdraw.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfChipWithdraw/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfWaiverRaiResponse:
    handler: validation/validateParentOfWaiverRaiResponse.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfWaiverRaiResponse/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfWaiverWithdraw:
    handler: validation/validateParentOfWaiverWithdraw.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfWaiverWithdraw/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfAppKRaiResponse:
    handler: validation/validateParentOfAppKRaiResponse.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfAppKRaiResponse/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfAppKWithdraw:
    handler: validation/validateParentOfAppKWithdraw.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfAppKWithdraw/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  validateParentOfWithdrawRAI:
    handler: validation/validateParentOfWithdrawRAI.main
    role: LambdaApiRole
    events:
      - http:
          path: validateParentOfWithdrawRAI/{parentId}
          method: get
          cors: true
          authorizer: aws_iam

  withdrawInitialWaiver:
    handler: form/withdrawInitialWaiver.main
    role: LambdaApiRole
    timeout: 30
    environment:
      ccEmail: ${self:custom.dmcoEmail}
    events:
      - http:
          path: withdrawInitialWaiver
          method: post
          cors: true
          authorizer: aws_iam

  withdrawMedicaidSPA:
    handler: form/withdrawMedicaidSPA.main
    role: LambdaApiRole
    timeout: 30
    environment:
      ccEmail: ${self:custom.dpoEmail}
    events:
      - http:
          path: withdrawMedicaidSPA
          method: post
          cors: true
          authorizer: aws_iam

  withdrawCHIPSPA:
    handler: form/withdrawCHIPSPA.main
    role: LambdaApiRole
    timeout: 30
    environment:
      reviewerEmail: ${self:custom.reviewerCHIPEmail}
      ccEmail: ${self:custom.chipCcEmail}
    events:
      - http:
          path: withdrawCHIPSPA
          method: post
          cors: true
          authorizer: aws_iam

  withdrawWaiverRenewal:
    handler: form/withdrawWaiverRenewal.main
    role: LambdaApiRole
    timeout: 30
    environment:
      ccEmail: ${self:custom.dmcoEmail}
    events:
      - http:
          path: withdrawWaiverRenewal
          method: post
          cors: true
          authorizer: aws_iam

  withdrawWaiverAmendment:
    handler: form/withdrawWaiverAmendment.main
    role: LambdaApiRole
    timeout: 30
    environment:
      ccEmail: ${self:custom.dmcoEmail}
    events:
      - http:
          path: withdrawWaiverAmendment
          method: post
          cors: true
          authorizer: aws_iam
  
  withdrawWaiverAppendixK:
    handler: form/withdrawWaiverAppendixK.main
    role: LambdaApiRole
    timeout: 30
    environment:
      ccEmail: ${self:custom.dhcbsooEmail}
    events:
      - http:
          path: withdrawWaiverAppendixK
          method: post
          cors: true
          authorizer: aws_iam
  
  enableRaiWithdraw:
    handler: form/enableRaiWithdraw.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: enableRaiWithdraw
          method: post
          cors: true
          authorizer: aws_iam

  disableRaiWithdraw:
    handler: form/disableRaiWithdraw.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: disableRaiWithdraw
          method: post
          cors: true
          authorizer: aws_iam

  withdrawRAIResponse:
    handler: form/withdrawRAIResponse.main
    role: LambdaApiRole
    timeout: 30
    environment:
      osgEmail: ${self:custom.reviewerEmail}
      chipEmail: ${self:custom.reviewerCHIPEmail}
      chippoEmail: ${self:custom.chipCcEmail}
      dmcoEmail: ${self:custom.dmcoEmail}
      dpoEmail: ${self:custom.dpoEmail}
      dhcboEmail: ${self:custom.dhcbsooEmail}
    events:
      - http:
          path: withdrawRAIResponse
          method: post
          cors: true
          authorizer: aws_iam

  getDetail:
    handler: getDetail.main
    role: LambdaApiRole
    events:
      - http:
          path: getDetail/{id}
          method: get
          cors: true
          authorizer: aws_iam

  getMyPackages:
    handler: getMyPackages.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyPackages
          method: get
          cors: true
          authorizer: aws_iam
  
  getTopic:
    handler: getTopic.main
    role: LambdaApiRole
    events:
      - http:
          path: getTopic
          method: get
          cors: true
          authorizer: aws_iam
  
  getTopicDetail:
    handler: getTopicDetail.main
    role: LambdaApiRole
    events:
      - http:
          path: getTopicDetail
          method: get
          cors: true
          authorizer: aws_iam

  package-exists:
    handler: package-exists.main
    role: LambdaApiRole
    events:
      - http:
          path: package-exists/{packageId}
          method: get
          cors: true
          authorizer: aws_iam

  getUser:
    handler: getUser.main
    role: LambdaApiRole
    events:
      - http:
          path: getUser
          method: get
          cors: true
          authorizer: aws_iam

  getMyUserList:
    handler: getMyUserList.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyUserList
          method: get
          cors: true
          authorizer: aws_iam

  setContactInfo:
    handler: setContactInfo.main
    role: LambdaApiRole
    events:
      - http:
          path: contactInfo
          method: put
          cors: true
          authorizer: aws_iam

  requestAccess:
    handler: requestAccess.main
    role: LambdaApiRole
    environment:
      userAccessEmailSource: ${self:custom.userAccessEmailSource}
    events:
      - http:
          path: requestAccess
          method: post
          cors: true
          authorizer: aws_iam

  updateUserStatus:
    handler: updateUserStatus.main
    role: LambdaApiRole
    timeout: 30
    environment:
      userAccessEmailSource: ${self:custom.userAccessEmailSource}
    events:
      - http:
          path: updateUserStatus
          method: post
          cors: true
          authorizer: aws_iam

  setUserPhoneNumber:
    handler: putPhoneNumber.main
    role: LambdaApiRole
    timeout: 30
    events:
      - http:
          path: phoneNumber
          method: put
          cors: true
          authorizer: aws_iam

  getMyApprovers:
    handler: getMyApprovers.main
    role: LambdaApiRole
    events:
      - http:
          path: getMyApprovers
          method: get
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/base.yml)}

  # Uploads S3 bucket
  - ${file(resources/spa-form-tables.yml)}

  # Roles
  - ${file(resources/roles.yml)}

  # API Gateway
  - ${file(resources/api-gateway.yml)}

  # SSM Parameters
  - ${file(resources/ssm-params.yml)}
  
  # CloudWatch Alarms
  - ${file(resources/cloudwatch.yml)}
