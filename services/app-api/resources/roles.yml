Resources:
  LambdaApiRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: ${self:custom.iamPath}
      PermissionsBoundary:
        Fn::If:
          - CreatePermissionsBoundary
          - Fn::Join:
            - ''
            -
              - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - '${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
          - Ref: AWS::NoValue
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: 'LambdaApiRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 'arn:aws:logs:*:*:*'
            - Effect: 'Allow'
              Action:
                - dynamodb:DescribeTable
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource:
                - arn:aws:dynamodb:*:*:table/${self:custom.tableName}
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:*:*:table/${self:custom.tableName}/index/*
            - Effect: 'Allow'
              Action:
                - logs:CreateLogStream
                - logs:CreateLogGroup
              Resource:
                - Fn::Join:
                  - "/"
                  -
                    - Fn::Join: [":", ["arn:aws:execute-api", {"Ref": "AWS::Region"}, {"Ref":"AWS::AccountId"}, {"Ref": "ApiGatewayRestApi"}]]
            - Effect: 'Allow'
              Action:
              - ses:SendEmail
              - ses:SendRawEmail
              Resource: '*'
            - Effect: 'Allow'
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt SpaIdTable.Arn
            - Effect: 'Allow'
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: arn:aws:dynamodb:*:*:table/${self:custom.userTableName}
  LambdaWarmupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: ${self:custom.iamPath}
      PermissionsBoundary:
        Fn::If:
          - CreatePermissionsBoundary
          - Fn::Join:
            - ''
            -
              - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - '${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
          - Ref: AWS::NoValue
      Policies:
        - PolicyName: 'Warmup'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - lambda:InvokeFunction
                Resource: '*'


