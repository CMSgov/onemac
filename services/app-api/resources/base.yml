Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
          - ""
          - ${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}

Resources:
  LambdaApiRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: ${self:custom.iamPath}
      PermissionsBoundary:
        Fn::If:
          - CreatePermissionsBoundary
          - Fn::Join:
            - ''
            -
              - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - '${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
          - Ref: AWS::NoValue
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: 'LambdaApiRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 'arn:aws:logs:*:*:*'
            - Effect: 'Allow'
              Action:
                - dynamodb:DescribeTable
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource:
                - arn:aws:dynamodb:*:*:table/${self:custom.tableName}
            - Effect: 'Allow'
              Action:
                - logs:CreateLogStream
                - logs:CreateLogGroup
              Resource:
                - Fn::Join:
                  - "/"
                  -
                    - Fn::Join: [":", ["arn:aws:execute-api", {"Ref": "AWS::Region"}, {"Ref":"AWS::AccountId"}, {"Ref": "ApiGatewayRestApi"}]]
            - Effect: 'Allow'
              Action:
              - ses:SendEmail
              - ses:SendRawEmail
              Resource: '*'
  LambdaWarmupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: ${self:custom.iamPath}
      PermissionsBoundary:
        Fn::If:
          - CreatePermissionsBoundary
          - Fn::Join:
            - ''
            -
              - 'arn:aws:iam::'
              - Ref: AWS::AccountId
              - ':policy'
              - '${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
          - Ref: AWS::NoValue
      Policies:
        - PolicyName: 'Warmup'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
  GatewayResponseDefault4XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'
  GatewayResponseDefault5XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: 'ApiGatewayRestApi'
  ApiGwWebAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: ${self:custom.stage}-ApiGwWebAcl
      DefaultAction:
        Block: {}
      Rules:
        - Action:
            Allow: {}
          Name: ${self:custom.stage}-allow-usa-plus-territories
          Priority: 0
          Statement:
            GeoMatchStatement:
              CountryCodes:
                - GU # Guam
                - PR # Puerto Rico
                - US # USA
                - UM # US Minor Outlying Islands
                - VI # US Virgin Islands
                - MP # Northern Mariana Islands
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: WafWebAcl
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        SampledRequestsEnabled: true
        MetricName: ${self:custom.stage}-webacl
  ApiGwWebAclAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn:
        Fn::Join:
          - ""
          -
            - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - '::/restapis/'
            - Ref: ApiGatewayRestApi
            - '/stages/${self:custom.stage}'
      WebACLArn:
        Fn::GetAtt:
          - ApiGwWebAcl
          - Arn
Outputs:
  ApiGatewayRestApiName:
    Value:
      Ref: ApiGatewayRestApi
  ApiGatewayRestApiUrl:
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: ApiGatewayRestApi
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"
  Region:
    Value:
      Ref: AWS::Region