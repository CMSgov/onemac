service: ui

custom:
  stage: ${opt:stage, self:provider.stage}
  iamPath: ${env:IAM_PATH, "/"}

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
          - ""
          - ${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
    CreateDnsRecord:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - ""
            - ${env:ROUTE_53_HOSTED_ZONE_ID, ""}
        - Fn::Not:
          - Fn::Equals:
            - ""
            - ${env:ROUTE_53_DOMAIN_NAME, ""}
    CreateCustomCloudFrontDomain:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - ""
            - ${env:CLOUDFRONT_CERTIFICATE_ARN, ""}
        - Fn::Not:
          - Fn::Equals:
            - ""
            - ${env:CLOUDFRONT_DOMAIN_NAME, ""}

  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
      DeletionPolicy: Delete
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 's3:GetObject'
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                  - CloudFrontOriginAccessIdentity
                  - S3CanonicalUserId
        Bucket: !Ref S3Bucket
    CloudFrontWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: CLOUDFRONT
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.stage}-webacl
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI to prevent direct public access to the bucket

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distro for the static website hosted in S3
          Aliases:
            Fn::If:
              - CreateCustomCloudFrontDomain
              -
                - ${env:CLOUDFRONT_DOMAIN_NAME, ""}
              - Ref: AWS::NoValue
          Origins:
          - DomainName:
              Fn::GetAtt:
                - S3Bucket
                - DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                - ''
                - - origin-access-identity/cloudfront/
                  - Ref: CloudFrontOriginAccessIdentity
          Enabled: true
          HttpVersion: 'http2'
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - AcmCertificateArn: ${env:CLOUDFRONT_CERTIFICATE_ARN, ""}
                MinimumProtocolVersion: TLSv1
                SslSupportMethod: sni-only
              - CloudFrontDefaultCertificate: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200 # Returning a 200 allows the react app to serve the file correctly
              ResponsePagePath: /index.html
          WebACLId:
            Fn::GetAtt:
              - CloudFrontWebAcl
              - Arn

    Route53DnsRecord:
      Type: AWS::Route53::RecordSet
      Condition: CreateDnsRecord
      Properties:
        HostedZoneId: ${env:ROUTE_53_HOSTED_ZONE_ID, ""}
        Name: ${env:ROUTE_53_DOMAIN_NAME, ""}
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2
          EvaluateTargetHealth: false
        Type: A

    # Set the application endpoint to the custom name if CLOUDFRONT_DOMAIN_NAME is set, otherwise use the CloudFrontDistribution domain name.
    # Note this URL has no trailing slash.
    ApplicationEndpointUrl:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:custom.stage}/ui/application_endpoint
        Type: String
        Value:
          Fn::If:
            - CreateCustomCloudFrontDomain
            - https://${env:CLOUDFRONT_DOMAIN_NAME, ""}
            - Fn::Join:
                - ''
                -
                  - https://
                  - Fn::GetAtt:
                    - CloudFrontDistribution
                    - DomainName

    Firehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName:
          !Join
            - ''
            - - aws-waf-logs-
              - Ref AWS::StackName
        ExtendedS3DestinationConfiguration:
          RoleARN: !GetAtt DeliveryRole.Arn
          BucketARN: arn:aws:s3:::test-ish-waflogs
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          CompressionFormat: UNCOMPRESSED

    DeliveryRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
              - ''
              -
                - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ':policy'
                - '${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
            - Ref: AWS::NoValue
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: 'sts:AssumeRole'
              Condition:
                StringEquals:
                  'sts:ExternalId': !Ref 'AWS::AccountId'


    DeliveryPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: 'firehose_delivery_policy'

        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:AbortMultipartUpload
                - s3:GetBucketLocation
                - s3:GetObject
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:PutObject
              Resource:
                - !Join
                  - ''
                  - - 'arn:aws:s3:::test-ish-waflogs/*'
                    - !Ref s3bucket

                - !Join
                  - ''
                  - - 'arn:aws:s3:::test-ish-waflogs/*'
                    - !Ref s3bucket
                    - '*'

        Roles:
          - !Ref DeliveryRole




    PermissionToCallRemediationLambda:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt WafLambda.Arn
        Action: "lambda:InvokeFunction"
        Principal: "ssm.amazonaws.com"

    PermissionToCallLambda:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt Lambda.Arn
        Action: "lambda:InvokeFunction"
        Principal: "config.amazonaws.com"


  Outputs:
    S3BucketName:
      Value:
        Ref: S3Bucket
    CloudFrontDistributionId:
      Value:
        Ref: CloudFrontDistribution
    CloudFrontEndpointUrl:
      Value:
        Fn::Join:
          - ''
          -
            - https://
            - Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
    ApplicationEndpointUrl:
      Value: !GetAtt ApplicationEndpointUrl.Value
