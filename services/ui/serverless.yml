service: ui

custom:
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev

resources:
  Conditions:
    CreateDnsRecord:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - ""
            - ${env:ROUTE_53_HOSTED_ZONE_ID, ""}
        - Fn::Not:
          - Fn::Equals:
            - ""
            - ${env:ROUTE_53_DOMAIN_NAME, ""}
    CreateCustomCloudFrontDomain:
      Fn::And:
        - Fn::Not:
          - Fn::Equals:
            - ""
            - ${env:CLOUDFRONT_CERTIFICATE_ARN, ""}
        - Fn::Not:
          - Fn::Equals:
            - ""
            - ${env:CLOUDFRONT_DOMAIN_NAME, ""}
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
      DeletionPolicy: Delete
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 's3:GetObject'
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                  - CloudFrontOriginAccessIdentity
                  - S3CanonicalUserId
        Bucket: !Ref S3Bucket
    CloudFrontWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: CLOUDFRONT
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.stage}-webacl
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI to prevent direct public access to the bucket

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distro for the static website hosted in S3
          Aliases:
            Fn::If:
              - CreateCustomCloudFrontDomain
              -
                - ${env:CLOUDFRONT_DOMAIN_NAME, ""}
              - Ref: AWS::NoValue
          Origins:
          - DomainName:
              Fn::GetAtt:
                - S3Bucket
                - DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                - ''
                - - origin-access-identity/cloudfront/
                  - Ref: CloudFrontOriginAccessIdentity
          Enabled: true
          HttpVersion: 'http2'
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - AcmCertificateArn: ${env:CLOUDFRONT_CERTIFICATE_ARN, ""}
                MinimumProtocolVersion: TLSv1
                SslSupportMethod: sni-only
              - CloudFrontDefaultCertificate: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 403
              ResponsePagePath: /index.html
          WebACLId:
            Fn::GetAtt:
              - CloudFrontWebAcl
              - Arn

    Route53DnsRecord:
      Type: AWS::Route53::RecordSet
      Condition: CreateDnsRecord
      Properties:
        HostedZoneId: ${env:ROUTE_53_HOSTED_ZONE_ID, ""}
        Name: ${env:ROUTE_53_DOMAIN_NAME, ""}
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2
          EvaluateTargetHealth: false
        Type: A


  Outputs:
    S3BucketName:
      Value:
        Ref: S3Bucket
    CloudFrontDistributionId:
      Value:
        Ref: CloudFrontDistribution
    CloudFrontEndpointUrl:
      Value:
        Fn::Join:
          - ''
          -
            - https://
            - Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
