service: ui

frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-s3-bucket-helper

custom:
  stage: ${opt:stage, self:provider.stage}
  wafLoggingBucket: ${ssm:/configuration/default/wafLoggingBucket/ARN, ""}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy, ""}
    CreateDnsRecord:
      Fn::And:
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${env:ROUTE_53_HOSTED_ZONE_ID, ""}
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${env:ROUTE_53_DOMAIN_NAME, ""}
    CreateCustomCloudFrontDomain:
      Fn::And:
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${env:CLOUDFRONT_CERTIFICATE_ARN, ""}
        - Fn::Not:
            - Fn::Equals:
                - ""
                - ${env:CLOUDFRONT_DOMAIN_NAME, ""}

  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      DeletionPolicy: Delete
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "s3:GetObject"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                    - CloudFrontOriginAccessIdentity
                    - S3CanonicalUserId
            - Effect: Deny
              Principal: "*"
              Action: "s3:*"
              Resource:
                - !Sub ${S3Bucket.Arn}/*
                - !Sub ${S3Bucket.Arn}
              Condition:
                Bool:
                  "aws:SecureTransport": "false"
        Bucket: !Ref S3Bucket
    S3BucketCloudFrontLogs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${self:custom.stage}-cloudfront-logs-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        DeletionPolicy: Delete
    LogBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Deny
              Principal: "*"
              Action: "s3:*"
              Resource:
                - !Sub ${S3BucketCloudFrontLogs.Arn}/*
                - !Sub ${S3BucketCloudFrontLogs.Arn}
              Condition:
                Bool:
                  "aws:SecureTransport": "false"
        Bucket: !Ref S3BucketCloudFrontLogs
    CloudFrontWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
                  - AS # American Samoa
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: CLOUDFRONT
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.stage}-webacl
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI to prevent direct public access to the bucket

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distro for the static website hosted in S3
          Aliases:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - - ${env:CLOUDFRONT_DOMAIN_NAME, ""}
              - Ref: AWS::NoValue
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - S3Bucket
                  - DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - origin-access-identity/cloudfront/
                      - Ref: CloudFrontOriginAccessIdentity
          Enabled: true
          HttpVersion: "http2"
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt HstsCloudfrontFunction.FunctionMetadata.FunctionARN
          ViewerCertificate:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - AcmCertificateArn: ${env:CLOUDFRONT_CERTIFICATE_ARN, ""}
                MinimumProtocolVersion: TLSv1
                SslSupportMethod: sni-only
              - CloudFrontDefaultCertificate: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200 # Returning a 200 allows the react app to serve the file correctly
              ResponsePagePath: /index.html
          WebACLId:
            Fn::GetAtt:
              - CloudFrontWebAcl
              - Arn
          Logging:
            Bucket: !Sub
              - "${CloudFrontLogsBucketName}.s3.amazonaws.com"
              - CloudFrontLogsBucketName: !Ref S3BucketCloudFrontLogs
            IncludeCookies: false

    Route53DnsRecord:
      Type: AWS::Route53::RecordSet
      Condition: CreateDnsRecord
      Properties:
        HostedZoneId: ${env:ROUTE_53_HOSTED_ZONE_ID, ""}
        Name: ${env:ROUTE_53_DOMAIN_NAME, ""}
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2
          EvaluateTargetHealth: false
        Type: A
    HstsCloudfrontFunction:
      Type: AWS::CloudFront::Function
      Properties:
        AutoPublish: true
        FunctionCode: |
          function handler(event) {
            var response = event.response;
            var headers = response.headers;
            headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'};
            headers['x-frame-options'] = { value: 'SAMEORIGIN'};
            return response;
          }
        FunctionConfig:
          Comment: This function adds headers to implement HSTS and deny x-frame-options
          Runtime: cloudfront-js-1.0
        Name: hsts-${self:custom.stage}

    # Set the application endpoint to the custom name if CLOUDFRONT_DOMAIN_NAME is set, otherwise use the CloudFrontDistribution domain name.
    # Note this URL has no trailing slash.
    ApplicationEndpointUrl:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:custom.stage}/ui/application_endpoint
        Type: String
        Value:
          Fn::If:
            - CreateCustomCloudFrontDomain
            - https://${env:CLOUDFRONT_DOMAIN_NAME, ""}
            - Fn::Join:
                - ""
                - - https://
                  - Fn::GetAtt:
                      - CloudFrontDistribution
                      - DomainName

    ##This code block enables logging on waf and sends all logs to s3 and shipped off to splunk.
    Firehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: !Join
          - ""
          - - aws-waf-logs-
            - !Ref AWS::StackName
        ExtendedS3DestinationConfiguration:
          RoleARN: !GetAtt DeliveryRole.Arn
          BucketARN: !Join
            - ""
            - - "${self:custom.wafLoggingBucket}"
          Prefix: AWSLogs/WAF/${self:custom.stage}/
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          CompressionFormat: UNCOMPRESSED

    DeliveryRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
                - ""
                - - "arn:aws:iam::"
                  - Ref: AWS::AccountId
                  - ":policy"
                  - '${self:custom.iamPermissionsBoundaryPolicy, ""}'
            - Ref: AWS::NoValue
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: ""
              Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action: "sts:AssumeRole"
              Condition:
                StringEquals:
                  "sts:ExternalId": !Ref "AWS::AccountId"

    DeliveryPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: "firehose_delivery_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:AbortMultipartUpload"
                - "s3:GetBucketLocation"
                - "s3:GetObject"
                - "s3:ListBucket"
                - "s3:ListBucketMultipartUploads"
                - "s3:PutObject"
              Resource:
                - !Join
                  - ""
                  - - "${self:custom.wafLoggingBucket}"
                - !Join
                  - ""
                  - - "${self:custom.wafLoggingBucket}"
                    - "/*"
        Roles:
          - !Ref DeliveryRole

  Outputs:
    S3BucketName:
      Value:
        Ref: S3Bucket
    S3BucketCloudFrontLogsName:
      Value: !Ref S3BucketCloudFrontLogs
    CloudFrontDistributionId:
      Value:
        Ref: CloudFrontDistribution
    CloudFrontEndpointUrl:
      Value:
        Fn::Join:
          - ""
          - - https://
            - Fn::GetAtt:
                - CloudFrontDistribution
                - DomainName
    CloudFrontWebAclArn:
      Value: !GetAtt CloudFrontWebAcl.Arn
    FirehoseArn:
      Value: !GetAtt Firehose.Arn
    ApplicationEndpointUrl:
      Value: !GetAtt ApplicationEndpointUrl.Value
