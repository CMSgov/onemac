
service: one-stream

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-plugin-scripts
  - serverless-plugin-warmup
  - serverless-s3-bucket-helper
  - serverless-plugin-offline-dynamodb-stream
  - serverless-offline
custom:
  stage: ${opt:stage, self:provider.stage}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
  infrastructureType: ${ssm:/configuration/${self:custom.stage}/infrastucture/type, ssm:/configuration/default/infrastucture/type, "development"}
  warmupEnabled:
    production: true
    development: false
  warmup:
    default:
      enabled: ${self:custom.warmupEnabled.${self:custom.infrastructureType}}
      role: LambdaWarmupRole
      vpc: false
      events:
        - schedule: rate(3 minutes)
      timeout: 20
      prewarm: true
      concurrency: 5
      folderName: node_modules/serverless-bundle/src/_warmup
      cleanFolder: false
  localTableName: onemac-dev-one
  oneMacTableStreamArn: ${cf:app-api-${self:custom.stage}.OneMacTableStreamArn, ""}
  oneMacTableName: ${cf:app-api-${self:custom.stage}.OneMacTableName, ""}
  oneMacTableArn: ${cf:app-api-${self:custom.stage}.OneMacTableArn, ""}
  dynamodbStream:
    host: localhost
    port: 8000
    pollForever: true
    streams:
      - table: ${self:custom.localTableName}
        functions:
          - handleOneStream

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev

functions:
  handleOneStream:
    handler: handleOneStream.main
    events:
      - stream:
          arn: ${self:custom.oneMacTableStreamArn}
          startingPosition: LATEST
          maximumRetryAttempts: 2
    role: LambdaOneStreamRole
    environment:
      STAGE: ${self:custom.stage}
      oneMacTableName: ${self:custom.oneMacTableName}
      localTableName: ${self:custom.localTableName}
    maximumRetryAttempts: 2

  processPackages:
    handler: processPackages.main
    role: LambdaOneStreamRole
    environment:
      STAGE: ${self:custom.stage}
      oneMacTableName: ${self:custom.oneMacTableName}
      localTableName: ${self:custom.localTableName}
    maximumRetryAttempts: 2
    events:
      - schedule:
          rate: rate(2 minutes)
    timeout: 600

  rebuildPackages:
    handler: rebuildPackages.main
    role: LambdaOneStreamRole
    environment:
      STAGE: ${self:custom.stage}
      oneMacTableName: ${self:custom.oneMacTableName}
      localTableName: ${self:custom.localTableName}
    maximumRetryAttempts: 2
    timeout: 600

  deleteOutdatedItems:
    handler: deleteOutdatedItems.main
    role: LambdaOneStreamRole
    environment:
      STAGE: ${self:custom.stage}
      oneMacTableName: ${self:custom.oneMacTableName}
      localTableName: ${self:custom.localTableName}
    maximumRetryAttempts: 2
    timeout: 600

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
          - ""
          - ${self:custom.iamPermissionsBoundaryPolicy}
  Resources:
    LambdaOneStreamRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
              - ''
              -
                - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ':policy'
                - '${self:custom.iamPermissionsBoundaryPolicy}'
            - Ref: AWS::NoValue
        Policies:
          - PolicyName: 'LambdaRolePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: 'Allow'
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: "Allow"
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: arn:aws:dynamodb:*:*:table/${self:custom.oneMacTableName}
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - arn:aws:dynamodb:*:*:table/${self:custom.oneMacTableName}/index/*
              - Effect: 'Allow'
                Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
                Resource: ${self:custom.oneMacTableStreamArn}

    LambdaWarmupRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service: 'lambda.amazonaws.com'
              Action: 'sts:AssumeRole'
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
              - ''
              -
                - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ':policy'
                - '${self:custom.iamPermissionsBoundaryPolicy}'
            - Ref: AWS::NoValue
        Policies:
          - PolicyName: 'Warmup'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 'arn:aws:logs:*:*:*'
                - Effect: 'Allow'
                  Action:
                    - lambda:InvokeFunction
                  Resource: '*'
