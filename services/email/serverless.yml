service: email

frameworkVersion: "3"

useDotenv: true

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-s3-bucket-helper
  - serverless-offline
custom:
  stage: ${opt:stage, self:provider.stage}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy, ""}'

functions:
  processEmails:
    handler: handlers/processEmails.main
    timeout: 600

  sendToSNS:
    handler: handlers/sendToSNS.main
    timeout: 600

resources:
  Resources:
    EmailTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Distributing the sending of emails
        TopicName: Emails-${self:service}-${sls:stage}
        KmsMasterKeyId: alias/aws/sns

    EmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref EmailTopic
        Endpoint: !GetAtt ProcessEmailsLambdaFunction.Arn
        Protocol: lambda

    EmailTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: 
                - sns:Publish
                - sns:Subscribe
              Resource: !Ref EmailTopic
        Topics:
          - !Ref EmailTopic