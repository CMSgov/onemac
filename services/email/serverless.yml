service: email

frameworkVersion: "3"

useDotenv: true

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-s3-bucket-helper
  - serverless-offline
custom:
  stage: ${opt:stage, self:provider.stage}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
  oneMacTableName: ${cf:app-api-${self:custom.stage}.OneMacTableName, ""}
  oneMacTableArn: ${cf:app-api-${self:custom.stage}.OneMacTableArn, ""}
  emailTopic: ${cf:app-api-${self:custom.stage}.EmailTopic, ""}

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  timeout: 600
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy, ""}'

functions:
  processEmails:
    handler: handlers/processEmails.main
    events:
      - sns: ${self:custom.emailTopic}

  processEmailEvents:
    handler: handlers/processEmailEvents.main
    events:
      - sns: "Email-Receipts"

resources:
  Resources:
    EmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: ${self:custom.emailTopic}
        Endpoint: !GetAtt ProcessEmailsLambdaFunction.Arn
        Protocol: lambda

    EmailEventTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: Email-Receipts
        DisplayName: Handle the email events
        KmsMasterKeyId: alias/aws/sns

    EmailEventTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: 
                - sns:Publish
                - sns:Subscribe
              Resource: !Ref EmailEventTopic
        Topics:
          - !Ref EmailEventTopic

    EmailEventSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref EmailEventTopic
        Endpoint: !GetAtt ProcessEmailEventsLambdaFunction.Arn
        Protocol: lambda

