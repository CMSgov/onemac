service: email

frameworkVersion: "3"

useDotenv: true

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-s3-bucket-helper
  - serverless-offline
custom:
  stage: ${opt:stage, self:provider.stage}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
  oneMacTableName: ${cf:app-api-${self:custom.stage}.OneMacTableName, ""}
  oneMacTableArn: ${cf:app-api-${self:custom.stage}.OneMacTableArn, ""}
  emailEventTopicName: ${self:service}-${sls:stage}-email-events

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  stage: dev
  timeout: 600
  role: LambdaEmailEventRole
  environment:
    NODE_OPTIONS: "--enable-source-maps"
    oneMacTableName: ${self:custom.oneMacTableName}
    configurationSetName: 'email-${self:custom.stage}'
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy, ""}'

functions:
  processEmails:
    handler: handlers/processEmails.main
    events:
      - schedule:
          rate: rate(30 minutes)

  processEmailEvents:
    handler: handlers/processEmailEvents.main
    events:
      - sns:
          arn: !Ref EmailEventTopic
          topicName: ${self:custom.emailEventTopicName}

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
          - ""
          - ${self:custom.iamPermissionsBoundaryPolicy}

  Resources:
    EmailEventTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.emailEventTopicName}
        DisplayName: Monitoring the sending of emails
        KmsMasterKeyId: !Ref KmsKeyForEmails

    KmsKeyForEmails:
      Type: AWS::KMS::Key
      Properties:
        EnableKeyRotation: "true"
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Sid: Allow access for Root User
              Effect: Allow
              Principal:
                AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Action: "kms:*"
              Resource: "*"
            - Sid: Allow access for Key User (SNS Service Principal)
              Effect: Allow
              Principal:
                Service: "sns.amazonaws.com"
              Action:
                - "kms:GenerateDataKey"
                - "kms:Decrypt"
              Resource: "*"
            - Sid: Allow CloudWatch events to use the key
              Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource: "*"
            - Sid: Allow CloudWatch for CMK
              Effect: Allow
              Principal:
                Service:
                  - cloudwatch.amazonaws.com
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey*"
              Resource: "*"
            - Sid: Allow SES events to use the key
              Effect: Allow
              Principal:
                Service:
                  - ses.amazonaws.com
              Action:
                - "kms:Decrypt"
                - "kms:GenerateDataKey*"
              Resource: "*"

    EmailEventTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - ses.amazonaws.com
              Action: 
                - sns:Subscribe
                - sns:Publish
              Resource: !Ref EmailEventTopic
        Topics:
          - !Ref EmailEventTopic

    EmailEventSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref EmailEventTopic
        Endpoint: !GetAtt ProcessEmailEventsLambdaFunction.Arn
        Protocol: lambda

    EmailEventConfigurationSet:
      Type: AWS::SES::ConfigurationSet
      Properties:
        Name: "${self:service}-${sls:stage}-configuration"

    EmailEventConfigurationSetEventDestination:
      Type: AWS::SES::ConfigurationSetEventDestination
      Properties:
        ConfigurationSetName: !Ref EmailEventConfigurationSet
        EventDestination: 
          Enabled: true
          Name: "${self:service}-${sls:stage}-destination"
          MatchingEventTypes:
            - "send"
            - "reject"
            - "bounce"
            - "complaint"
            - "delivery"
            - "open"
            - "click"
            - "renderingFailure"
            - "deliveryDelay"
            - "subscription"
          SnsDestination: 
            TopicARN: !Ref EmailEventTopic

    LambdaEmailEventRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
              - ''
              -
                - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ':policy'
                - '${self:custom.iamPermissionsBoundaryPolicy}'
            - Ref: AWS::NoValue
        Policies:
          - PolicyName: 'LambdaRolePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: 'Allow'
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: "Allow"
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: arn:aws:dynamodb:*:*:table/${self:custom.oneMacTableName}
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - arn:aws:dynamodb:*:*:table/${self:custom.oneMacTableName}/index/*
