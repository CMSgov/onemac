service: email

frameworkVersion: "3"

useDotenv: true

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-s3-bucket-helper
custom:
  stage: ${opt:stage, self:provider.stage}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy, ""}'

functions:
  processEmails:
    handler: handlers/processEmails.main
    timeout: 600

  sendToSNS:
    handler: handlers/sendToSNS.main
    timeout: 600

resources:
  Resources:
    EmailTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Distributing the sending of emails
        KmsMasterKeyId: EmailTopicKey

    EmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref EmailTopic.Arn
        Endpoint: !GetAtt processEmails.Arn
        Protocol: lambda

    EmailTopicPolicy:
      Type: "AWS::SNS::TopicPolicy"
      Properties:
        Topics:
          - !Ref EmailTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "sns:Publish"
              Resource: !Ref EmailTopic
              Principal:
                AWS: "*"
              Condition:
                ArnLike:
                  AWS:SourceArn: !GetAtt sendToSNS.Arn
